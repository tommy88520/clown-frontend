{"version":3,"file":"static/js/782.c1468b59.chunk.js","mappings":"2MAWA,EARqB,SAAH,GAAgC,IAA1BA,EAAI,EAAJA,KAAQC,GAAU,YACxC,OACE,SAAC,KAAM,gBAACC,KAAK,WAAcD,GAAU,aAClCD,IAGP,C,uJCcA,EAnBoB,SAAH,GAAqB,IAAfG,EAAO,EAAPA,QACbC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IAChBC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,iBAAKC,UAAU,oBAAmB,WAChC,gBAAKC,IAAKJ,EAAKK,IAAG,UAAKP,MACvB,iBAAKK,UAAU,4BAA2B,WACxC,0BAAOL,KACP,uBAAIC,QAEN,SAAC,IAAY,CAACL,KAAK,eAAKY,QAXR,SAACC,GACnBA,EAAKC,kBACLP,GAASQ,EAAAA,EAAAA,IAAQZ,GACnB,MAWF,ECIA,G,QAlB0B,SAAH,GAA6B,IAAvBa,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAElC,OACE,iBAAKR,UAAU,8BAA6B,WAC1C,yBACE,SAAC,KAAI,CAACS,GAAIF,EAAOP,UAAU,yBAAwB,SAAEO,EAAMG,mBAE7D,gBAAKV,UAAU,yBAAwB,SACpCQ,EACEG,QAAO,SAACC,EAAGC,GAAG,OAAKA,EAAM,CAAC,IAC1BC,KAAI,SAACpB,EAASqB,GAAK,OAClB,SAAC,EAAW,CAAarB,QAASA,GAAhBqB,EAA2B,QAKzD,G,UCKA,EApB0B,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GACvBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,GAG9B,OACE,SAAC,EAAAC,SAAQ,UACNF,GACC,SAAC,IAAO,IAERH,EAASF,KAAI,SAACQ,EAAKP,GACjB,OACE,SAAC,EAAe,CAAaR,MAAOe,EAAIf,MAAOC,SAAUc,EAAId,UAAvCO,EAE1B,KAIR,E,UC1BaQ,EAAuB,SAACC,GAAK,OAAKA,EAAMhB,SAASA,QAAQ,EACzDiB,EAAwB,SAACD,GAAK,OAAKA,EAAMhB,SAASkB,eAAe,ECkC9E,EA3BiB,WACf,IAAQV,GAAaW,EAAAA,EAAAA,MAAbX,SAEFlB,GAAWC,EAAAA,EAAAA,OACjB6B,EAAAA,EAAAA,YAAU,WACR9B,GAAS+B,EAAAA,EAAAA,IAAmBb,GAE9B,GAAG,IACH,IAAQR,GAAaS,EAAAA,EAAAA,IAAYM,GAAzBf,SACFkB,GAAkBT,EAAAA,EAAAA,IAAYQ,GAEpC,OACE,UAAC,EAAAJ,SAAQ,YACP,wBAAKL,EAASN,gBACbgB,GAAmB,SAAC,IAAO,KAC1B,gBAAK1B,UAAU,qBAAoB,SAChCQ,GACCA,EAASM,KAAI,SAACpB,EAASqB,GAAK,OAC1B,SAAC,EAAW,CAAarB,QAASA,GAAhBqB,EAA2B,QAO3D,ECXA,EAfa,YACMhB,EAAAA,EAAAA,MAMjB,OAJA6B,EAAAA,EAAAA,YAAU,WACR,GACC,KAGD,UAAC,KAAM,YACL,SAAC,KAAK,CAACb,OAAK,EAACe,SAAS,SAAC,EAAiB,OACxC,SAAC,KAAK,CAACC,KAAK,YAAYD,SAAS,SAAC,EAAQ,QAGhD,C,8ECpBO,IAAMZ,EAAiB,SAACM,GAAK,OAAKA,EAAMR,SAASgB,IAAI,EAC/CZ,EAAwB,SAACI,GAAK,OAAKA,EAAMR,SAASiB,eAAe,C","sources":["components/customButton/customButton.jsx","components/product-card/product-card.jsx","components/categories-preview/categories-preview.jsx","routes/categories-preview/categorie-preview.jsx","store/productsDetail/productsDetails.js","routes/category/category.jsx","routes/shop/index.jsx","store/category/category.selector.js"],"sourcesContent":["import { Button, Form } from 'antd'\nimport React from 'react'\nimport './customButton.scss'\nconst CustomButton = ({ text,...otherProps }) => {\n  return (\n    <Button type=\"primary\" {...otherProps}>\n      {text}\n    </Button>\n  )\n}\n\nexport default CustomButton","import CustomButton from '../customButton/customButton'\nimport { useDispatch } from 'react-redux'\nimport { addCart } from '../../features/cartSlice'\nimport './product-card.scss'\nconst ProductCard = ({ product }) => {\n  const { brand, price, url } = product\n  const dispatch = useDispatch()\n  const addCartItem = (item) => {\n    item.stopPropagation()\n    dispatch(addCart(product))\n  }\n  return (\n    <div className=\"product-container\">\n      <img src={url} alt={`${brand}`} />\n      <div className=\"product-container__footer\">\n        <span>{brand}</span>\n        <p>{price}</p>\n      </div>\n      <CustomButton text=\"加入\" onClick={addCartItem}/>\n    </div>\n  )\n}\n\nexport default ProductCard","import { Link } from 'react-router-dom'\nimport ProductCard from '../product-card/product-card'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getCategory } from '../../features/categorySlice'\nimport { selectCategory } from '../../store/category/category.selector'\nimport './categories-preview.scss'\n\nconst CategoriesPreview = ({ title, products }) => {\n\n  return (\n    <div className=\"category-preview__container\">\n      <h2>\n        <Link to={title} className=\"category-preview__link\">{title.toUpperCase()}</Link>\n      </h2>\n      <div className=\"category-preview__body\">\n        {products\n          .filter((_, idx) => idx < 4)\n          .map((product, index) => (\n            <ProductCard key={index} product={product} />\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default CategoriesPreview","import { Fragment } from 'react';\nimport { useSelector } from 'react-redux'\nimport { selectCategory, selectCategoryLoading } from '../../store/category/category.selector'\n\n\nimport CategoryPreview from '../../components/categories-preview/categories-preview';\nimport Spinner from '../../components/spinner/spinner';\n\nconst CategoriesPreview = () => {\n  const category = useSelector(selectCategory);\n  const isLoading = useSelector(selectCategoryLoading);\n\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        category.map((res, index) => {\n          return (\n            <CategoryPreview key={index} title={res.title} products={res.products}/>\n          );\n        })\n      )}\n    </Fragment>\n  );\n};\n\nexport default CategoriesPreview;\n","export const selectProductsDetail = (state) => state.products.products\nexport const selectProductsLoading = (state) => state.products.productsLoading","import { useEffect, Fragment } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom';\nimport ProductCard from '../../components/product-card/product-card';\nimport { getProductsDetails } from '../../features/productsDetailsSlice'\nimport { selectProductsDetail, selectProductsLoading } from '../../store/productsDetail/productsDetails'\nimport Spinner from '../../components/spinner/spinner'\nimport './category.scss'\nconst Category = () => {\n  const { category } = useParams()\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getProductsDetails(category))\n    // eslint-disable-next-line\n  }, [])\n  const { products } = useSelector(selectProductsDetail)\n  const productsLoading = useSelector(selectProductsLoading)\n\n  return (\n    <Fragment>\n      <h2>{category.toUpperCase()}</h2>\n      {productsLoading ? (<Spinner />) : (\n        <div className=\"category-container\">\n          {products &&\n            products.map((product, index) => (\n              <ProductCard key={index} product={product} />\n            ))}\n        </div>)\n      }\n\n    </Fragment>\n  )\n}\n\nexport default Category","import { useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport CategoriesPreview from '../categories-preview/categorie-preview';\nimport Category from '../category/category';\n\nconst Shop = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // dispatch(fetchCategoriesStart());\n  }, []);\n\n  return (\n    <Routes>\n      <Route index element={<CategoriesPreview />} />\n      <Route path=':category' element={<Category />} />\n    </Routes>\n  );\n};\n\nexport default Shop;\n","export const selectCategory = (state) => state.category.data\nexport const selectCategoryLoading = (state) => state.category.categoryLoading"],"names":["text","otherProps","type","product","brand","price","url","dispatch","useDispatch","className","src","alt","onClick","item","stopPropagation","addCart","title","products","to","toUpperCase","filter","_","idx","map","index","category","useSelector","selectCategory","isLoading","selectCategoryLoading","Fragment","res","selectProductsDetail","state","selectProductsLoading","productsLoading","useParams","useEffect","getProductsDetails","element","path","data","categoryLoading"],"sourceRoot":""}