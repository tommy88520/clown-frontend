{"version":3,"file":"static/js/190.86600884.chunk.js","mappings":"2MAWA,EARqB,SAAH,GAAgC,IAA1BA,EAAI,EAAJA,KAAQC,GAAU,YACxC,OACE,SAAC,KAAM,gBAACC,KAAK,WAAcD,GAAU,aAClCD,IAGP,C,0KCAQG,EAAWC,EAAAA,EAAAA,OA4HnB,EA3He,WACb,MAAeC,EAAAA,EAAAA,UAARC,GAAsB,YAAlB,GASLC,EAAW,yCAAG,mFAClBC,OAAOC,KAAK,GAAD,OAAIC,0CAAsC,gBAAgB,SAAS,2CAC/E,kBAFgB,mCAGjB,OACE,iBAAKC,UAAU,UAAS,WACtB,wEACA,+CACA,UAAC,IAAI,CACHL,KAAMA,EACNM,KAAK,WACLC,SAlBW,SAACC,IAChBC,EAAAA,EAAAA,IAAOD,GACPR,EAAKU,aACP,EAgBMC,eAfiB,SAACC,GACtBC,QAAQC,IAAI,UAAWF,EACzB,EAcMG,cAAe,CAAEC,UAAU,GAC3BC,oBAAkB,EAClBZ,UAAU,gBAAe,WAEzB,SAAC,SAAS,CACRC,KAAK,QACLY,MAAM,SACNC,MAAO,CACL,CACEvB,KAAM,QACNwB,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,8BAEX,UAEF,SAAC,IAAK,OAGR,SAAC,SAAS,CACRd,KAAK,WACLY,MAAM,WACNC,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,gCAGbE,aAAW,YAEX,SAAC,aAAc,CAACC,aAAa,WAG/B,SAAC,SAAS,CACRjB,KAAK,mBACLY,MAAM,mBACNM,aAAc,CAAC,YACfF,aAAW,EACXH,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,iCAEX,gBAAGK,EAAa,EAAbA,cAAa,MAAQ,CACtBC,UAAS,SAACC,EAAGC,GACX,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OAAO,IAAIC,MAAM,qDAFvBF,QAAQG,SAGnB,EACD,GACD,UAEF,SAAC,aAAc,CAACT,aAAa,WAG/B,SAAC,SAAS,CACRjB,KAAK,WACLY,MAAM,WACNe,QAAQ,uCACRd,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,8BACTc,YAAY,IAEd,UAEF,SAAC,IAAK,OAER,SAAC,SAAS,CACR5B,KAAK,SACLY,MAAM,SACNC,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,0BAEX,UAEF,UAAC,IAAM,CAACe,YAAY,qBAAoB,WACtC,SAACtC,EAAM,CAAC+B,MAAM,OAAM,mBACpB,SAAC/B,EAAM,CAAC+B,MAAM,SAAQ,qBACtB,SAAC/B,EAAM,CAAC+B,MAAM,QAAO,yBAGzB,SAAC,SAAS,CAACvB,UAAU,cAAa,UAChC,SAAC,IAAY,CAAC+B,SAAS,SAAS1C,KAAK,oBAEvC,gBAAKW,UAAU,wBAAuB,UACpC,SAAC,IAAY,CAACX,KAAK,kCAAc2C,QAASpC,WAQpD,C","sources":["components/customButton/customButton.jsx","routes/signUp/index.jsx"],"sourcesContent":["import { Button, Form } from 'antd'\nimport React from 'react'\nimport './customButton.scss'\nconst CustomButton = ({ text,...otherProps }) => {\n  return (\n    <Button type=\"primary\" {...otherProps}>\n      {text}\n    </Button>\n  )\n}\n\nexport default CustomButton","import React from 'react';\nimport { signUp } from '../../features/userSlice'\nimport CustomButton from '../../components/customButton/customButton'\nimport './signUp.scss'\nimport {\n  Form,\n  Input,\n  Select,\n} from 'antd';\nconst { Option } = Select;\nconst SignUp = () => {\n  const [form] = Form.useForm();\n  const onFinish = (values) => {\n    signUp(values)\n    form.resetFields();\n  };\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const handleLogin = async () => {\n    window.open(`${process.env.REACT_APP_BACKEND_BASE_URL}google/login`, \"_self\");\n  };\n  return (\n    <div className=\"sign-up\">\n      <h2>還沒有賬號嗎？</h2>\n      <p>請註冊</p>\n      <Form\n        form={form}\n        name=\"register\"\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        initialValues={{ remember: true }}\n        scrollToFirstError\n        className=\"sign-up__form\"\n      >\n        <Form.Item\n          name=\"email\"\n          label=\"E-mail\"\n          rules={[\n            {\n              type: 'email',\n              message: 'The input is not valid E-mail!',\n            },\n            {\n              required: true,\n              message: 'Please input your E-mail!',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          name=\"password\"\n          label=\"Password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n          hasFeedback\n        >\n          <Input.Password autoComplete=\"off\"/>\n        </Form.Item>\n\n        <Form.Item\n          name=\"confirm_password\"\n          label=\"Confirm Password\"\n          dependencies={['password']}\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: 'Please confirm your password!',\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(new Error('The two passwords that you entered do not match!'));\n              },\n            }),\n          ]}\n        >\n          <Input.Password autoComplete=\"off\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"nickname\"\n          label=\"Nickname\"\n          tooltip=\"What do you want others to call you?\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your nickname!',\n              whitespace: true,\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"gender\"\n          label=\"Gender\"\n          rules={[\n            {\n              required: true,\n              message: 'Please select gender!',\n            },\n          ]}\n        >\n          <Select placeholder=\"select your gender\">\n            <Option value=\"male\">Male</Option>\n            <Option value=\"female\">Female</Option>\n            <Option value=\"other\">Other</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item className=\"submit-item\">\n          <CustomButton htmlType=\"submit\" text=\"送出\" />\n        </Form.Item>\n        <div className=\"sign-up__google-login\">\n          <CustomButton text=\"google註冊/登入\" onClick={handleLogin} />\n        </div>\n      </Form>\n\n    </div>\n\n\n  );\n};\nexport default SignUp;"],"names":["text","otherProps","type","Option","Select","Form","form","handleLogin","window","open","process","className","name","onFinish","values","signUp","resetFields","onFinishFailed","errorInfo","console","log","initialValues","remember","scrollToFirstError","label","rules","message","required","hasFeedback","autoComplete","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","tooltip","whitespace","placeholder","htmlType","onClick"],"sourceRoot":""}