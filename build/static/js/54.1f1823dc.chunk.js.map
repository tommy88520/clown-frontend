{"version":3,"file":"static/js/54.1f1823dc.chunk.js","mappings":"0MAWA,EARqB,SAAH,GAAgC,IAA1BA,EAAI,EAAJA,KAAQC,GAAU,YACxC,OACE,SAAC,KAAM,gBAACC,KAAK,WAAcD,GAAU,aAClCD,IAGP,C,2KC+FA,EA9Fe,WACb,MAAeG,EAAAA,EAAAA,UAARC,GAAsB,YAAlB,GACLC,GAAWC,EAAAA,EAAAA,MASXC,EAAW,yCAAG,mFAClBC,OAAOC,KAAK,GAAD,OAAIC,0CAAsC,gBAAgB,SAAS,2CAC/E,kBAFgB,mCAMjB,OACE,iBAAKC,UAAU,UAAS,WACtB,8EACA,+CACA,UAAC,IAAI,CACHP,KAAMA,EACNQ,KAAK,SACLC,SArBW,SAACC,GAChB,IAAMC,EAAO,CACXC,SAAUF,EAAOG,MACjBC,SAAUJ,EAAOI,UAEnBb,GAASc,EAAAA,EAAAA,IAAMJ,GAEjB,EAeMK,eAXiB,SAACC,GACtBC,QAAQC,IAAI,UAAWF,EACzB,EAUMG,oBAAkB,EAClBb,UAAU,gBAAe,WAEzB,SAAC,SAAS,CACRC,KAAK,QACLa,MAAM,SACNC,MAAO,CACL,CACExB,KAAM,QACNyB,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,8BAEX,UAEF,SAAC,IAAK,OAGR,SAAC,SAAS,CACRf,KAAK,WACLa,MAAM,WACNC,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,gCAGbE,aAAW,YAEX,SAAC,aAAc,CAACC,aAAa,WAG/B,SAAC,SAAS,CACRlB,KAAK,UACLa,MAAM,mBACNM,aAAc,CAAC,YACfF,aAAW,EACXH,MAAO,CACL,CACEE,UAAU,EACVD,QAAS,iCAEX,gBAAGK,EAAa,EAAbA,cAAa,MAAQ,CACtBC,UAAS,SAACC,EAAGC,GACX,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OAAO,IAAIC,MAAM,qDAFvBF,QAAQG,SAGnB,EACD,GACD,UAEF,SAAC,aAAc,CAACT,aAAa,WAE/B,SAAC,SAAS,CAACnB,UAAU,cAAa,UAChC,SAAC,IAAY,CAAC6B,SAAS,SAASxC,KAAK,oBAEvC,gBAAKW,UAAU,wBAAuB,UACpC,SAAC,IAAY,CAACX,KAAK,kCAAcyC,QAASlC,WAOpD,C","sources":["components/customButton/customButton.jsx","routes/signIn/index.jsx"],"sourcesContent":["import { Button, Form } from 'antd'\nimport React from 'react'\nimport './customButton.scss'\nconst CustomButton = ({ text,...otherProps }) => {\n  return (\n    <Button type=\"primary\" {...otherProps}>\n      {text}\n    </Button>\n  )\n}\n\nexport default CustomButton","import React from 'react';\nimport CustomButton from '../../components/customButton/customButton'\nimport './signIn.scss'\nimport { useDispatch } from 'react-redux'\nimport { logIn } from '../../features/userSlice'\n\nimport {\n  Form,\n  Input,\n} from 'antd';\nconst SignIn = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch()\n  const onFinish = (values) => {\n    const user = {\n      username: values.email,\n      password: values.password\n    }\n    dispatch(logIn(user))\n    \n  };\n  const handleLogin = async () => {\n    window.open(`${process.env.REACT_APP_BACKEND_BASE_URL}google/login`, \"_self\");\n  };\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n  return (\n    <div className=\"sign-in\">\n      <h2>已經有帳號了嗎？</h2>\n      <p>請登入</p>\n      <Form\n        form={form}\n        name=\"signIn\"\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        scrollToFirstError\n        className=\"sign-in__form\"\n      >\n        <Form.Item\n          name=\"email\"\n          label=\"E-mail\"\n          rules={[\n            {\n              type: 'email',\n              message: 'The input is not valid E-mail!',\n            },\n            {\n              required: true,\n              message: 'Please input your E-mail!',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          name=\"password\"\n          label=\"Password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n          hasFeedback\n        >\n          <Input.Password autoComplete=\"off\"/>\n        </Form.Item>\n\n        <Form.Item\n          name=\"confirm\"\n          label=\"Confirm Password\"\n          dependencies={['password']}\n          hasFeedback\n          rules={[\n            {\n              required: true,\n              message: 'Please confirm your password!',\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(new Error('The two passwords that you entered do not match!'));\n              },\n            }),\n          ]}\n        >\n          <Input.Password autoComplete=\"off\"/>\n        </Form.Item>\n        <Form.Item className=\"submit-item\">\n          <CustomButton htmlType=\"submit\" text=\"送出\"/>\n        </Form.Item>\n        <div className=\"sign-in__google-login\">\n          <CustomButton text=\"google註冊/登入\" onClick={handleLogin} />\n        </div>\n      </Form>\n    </div>\n\n\n  );\n};\nexport default SignIn;"],"names":["text","otherProps","type","Form","form","dispatch","useDispatch","handleLogin","window","open","process","className","name","onFinish","values","user","username","email","password","logIn","onFinishFailed","errorInfo","console","log","scrollToFirstError","label","rules","message","required","hasFeedback","autoComplete","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","htmlType","onClick"],"sourceRoot":""}